#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var browserify = require('browserify');
var sass = require('node-sass');

function handleError(err) {
  if (err.stack) {
    console.error(err.stack);
  } else {
    console.log(String(err));
  }
}

function watchJs() {
  const jsDir = path.resolve(__dirname, 'lib', 'js');
  const src = path.resolve(__dirname, 'lib', 'js', 'app.js');
  const dest = path.resolve(__dirname, 'dist', 'bundle.js');

  watch(jsDir, src, dest, (status, writeFn) => {
    bundle(status, writeFn => {
      const b = browserify(src, { transform: 'babelify' });

      b.bundle((err, buf) => {
        if (err) {
          handleError(err);
          status.bundling = false;
        } else {
          writeFn(buf);
        }
      });
    }, writeFn);
  });
}

function watchSass() {
  const sassDir = path.resolve(__dirname, 'lib', 'css');
  const src = path.resolve(__dirname, 'lib', 'css', 'main.sass');
  const dest = path.resolve(__dirname, 'dist', 'main.css');

  watch(sassDir, src, dest, (status, writeFn) => {
    bundle(status, writeFn => {
      const options = {
        file: src,
        outFile: dest,
        indentedSyntax: true,
      };

      sass.render(options, (err, result) => {
        if (err) {
          handleError(err);
          status.bundling = false;
        } else {
          writeFn(result.css);
        }

      });
    }, writeFn);
  });
}

function bundle(status, howToBundle, writeFn) {
  if (status.bundling) {
    console.log(`${new Date().toLocaleString()}: bundling already in progress`);
  } else {
    status.bundling = true;
    howToBundle(writeFn);
  }
}

function watch(dir, src, dest, bundleFn) {
  const status = { bundling: false };

  console.log(`Watching directory ${dir} for changes.`);
  fs.watch(dir, { recursive: true }, (eventType, filename) => {
    let date;
    let options;

    console.log(`${new Date().toLocaleString()}: Change detected in file ${filename}`);
    bundleFn(status, data => {
      const distDir = path.join(__dirname, 'dist');

      if (!fs.existsSync(distDir)) {
        fs.mkdir(distDir, (err) => {
          if (err) {
            handleError(err);
          } else {
            writeFile(data, dest, status);
          }
        });
      } else {
        writeFile(data, dest, status);
      }
    });
  });
}

function writeFile(data, dest, status) {
  // const r = fs.createWriteStream(dest);
  // r.on('open', (e) => console.log('e is now open', e));
  // fs.createReadStream(data).pipe(r);
  // status.bundling = false;
  // console.log(`${new Date().toLocaleString()}: Re-bundled` + '\n');

  fs.writeFile(dest, data, err => {
    if (err) {
      handleError(err);
    } else {
      console.log(`${new Date().toLocaleString()}: Re-bundled` + '\n');
    }

    status.bundling = false;
  });
}

watchJs();
watchSass();
